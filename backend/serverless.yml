service: forum-builder

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    USERS_TABLE: forum-builder-users-${self:provider.stage}
    FORUMS_TABLE: forums-${self:provider.stage}
    FORUM_MEMBERS_TABLE: forum-members-${self:provider.stage}
    FORUM_CATEGORIES_TABLE: forum-categories-${self:provider.stage}
    FORUM_THREADS_TABLE: forum-threads-${self:provider.stage}
    FORUM_POSTS_TABLE: forum-posts-${self:provider.stage}
    SUBSCRIPTIONS_TABLE: subscriptions-${self:provider.stage}
    GOOGLE_CLIENT_ID: 242648112266-g4qgi0h2vumodsecqmej68qb9r6odmp2.apps.googleusercontent.com
    JWT_SECRET: ${ssm:/forum-builder/jwt-secret}
    STRIPE_SECRET_KEY: ${ssm:/forum-builder/stripe-secret-key}
    STRIPE_WEBHOOK_SECRET: ${ssm:/forum-builder/stripe-webhook-secret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUMS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUMS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_MEMBERS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_MEMBERS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_CATEGORIES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_CATEGORIES_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_THREADS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_THREADS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_POSTS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORUM_POSTS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBSCRIPTIONS_TABLE}

functions:
  # Auth
  googleAuth:
    handler: src/handlers/auth.google
    events:
      - http:
          path: auth/google
          method: post
          cors: true

  getUser:
    handler: src/handlers/auth.getUser
    events:
      - http:
          path: auth/me
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  # Platform - Forum Management
  listForums:
    handler: src/handlers/platform.list
    events:
      - http:
          path: forums
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  createForum:
    handler: src/handlers/platform.create
    events:
      - http:
          path: forums
          method: post
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  getForum:
    handler: src/handlers/platform.get
    events:
      - http:
          path: forums/{forumId}
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  updateForum:
    handler: src/handlers/platform.update
    events:
      - http:
          path: forums/{forumId}
          method: put
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  deleteForum:
    handler: src/handlers/platform.deleteForum
    events:
      - http:
          path: forums/{forumId}
          method: delete
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  # Stripe Integration
  createCheckoutSession:
    handler: src/handlers/stripe.createCheckout
    events:
      - http:
          path: subscribe
          method: post
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  stripeWebhook:
    handler: src/handlers/stripe.webhook
    events:
      - http:
          path: webhooks/stripe
          method: post

  getSubscription:
    handler: src/handlers/stripe.getSubscription
    events:
      - http:
          path: subscription
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  cancelSubscription:
    handler: src/handlers/stripe.cancel
    events:
      - http:
          path: subscription/cancel
          method: post
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: request

  # Forum Instance API - Categories
  listCategories:
    handler: src/handlers/categories.list
    events:
      - http:
          path: api/{forumId}/categories
          method: get
          cors: true

  createCategory:
    handler: src/handlers/categories.create
    events:
      - http:
          path: api/{forumId}/categories
          method: post
          cors: true

  # Forum Instance API - Threads
  listThreads:
    handler: src/handlers/threads.list
    events:
      - http:
          path: api/{forumId}/categories/{categoryId}/threads
          method: get
          cors: true

  createThread:
    handler: src/handlers/threads.create
    events:
      - http:
          path: api/{forumId}/categories/{categoryId}/threads
          method: post
          cors: true

  getThread:
    handler: src/handlers/threads.get
    events:
      - http:
          path: api/{forumId}/threads/{threadId}
          method: get
          cors: true

  # Forum Instance API - Posts
  listPosts:
    handler: src/handlers/posts.list
    events:
      - http:
          path: api/{forumId}/threads/{threadId}/posts
          method: get
          cors: true

  createPost:
    handler: src/handlers/posts.create
    events:
      - http:
          path: api/{forumId}/threads/{threadId}/posts
          method: post
          cors: true

  votePost:
    handler: src/handlers/posts.vote
    events:
      - http:
          path: api/{forumId}/posts/{postId}/vote
          method: put
          cors: true

  # JWT Authorizer
  jwtAuthorizer:
    handler: src/handlers/authorizer.handler

resources:
  Resources:
    # Users Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: stripeCustomerId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: StripeCustomerIndex
            KeySchema:
              - AttributeName: stripeCustomerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Forums Table
    ForumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORUMS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: forumId
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
          - AttributeName: subdomain
            AttributeType: S
        KeySchema:
          - AttributeName: forumId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: OwnerIdIndex
            KeySchema:
              - AttributeName: ownerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: SubdomainIndex
            KeySchema:
              - AttributeName: subdomain
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Forum Members Table
    ForumMembersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORUM_MEMBERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: memberKey
            AttributeType: S
          - AttributeName: forumId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: memberKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ForumIdIndex
            KeySchema:
              - AttributeName: forumId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Forum Categories Table
    ForumCategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORUM_CATEGORIES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: categoryKey
            AttributeType: S
          - AttributeName: forumId
            AttributeType: S
        KeySchema:
          - AttributeName: categoryKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ForumIdIndex
            KeySchema:
              - AttributeName: forumId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Forum Threads Table
    ForumThreadsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORUM_THREADS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: threadKey
            AttributeType: S
          - AttributeName: forumCategoryKey
            AttributeType: S
        KeySchema:
          - AttributeName: threadKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ForumCategoryIndex
            KeySchema:
              - AttributeName: forumCategoryKey
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Forum Posts Table
    ForumPostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORUM_POSTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: postKey
            AttributeType: S
          - AttributeName: forumThreadKey
            AttributeType: S
        KeySchema:
          - AttributeName: postKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ForumThreadIndex
            KeySchema:
              - AttributeName: forumThreadKey
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Subscriptions Table
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SUBSCRIPTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

plugins:
  - serverless-offline
